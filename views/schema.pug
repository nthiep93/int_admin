extends layout

block content
    // when using the mode "code", it's important to specify charset utf-8
    meta(http-equiv='Content-Type' content='text/html;charset=utf-8')
    script(src='json-editor-master/dist/jsoneditor.min.js')
    link(rel='stylesheet' id='theme_stylesheet')
    link(rel='stylesheet' id='icon_stylesheet')
    .container
        .row
            #editor
        div(style="display: none").span3.col-md-3.columns.four.large-3
            div
            a#direct_link(href='#') Direct Link
            |  (preserves schema, value, and options)
            h2 JSON Output
            p
            | You can also make changes to the JSON here and set the value in the editor by clicking 
            button#setvalue.btn.btn-primary Update Form
            textarea#output.form-control(style='width: 100%; height: 300px; font-family: monospace;')
            h2 Options
            #options_holder
            div
                label CSS Framework
                select#theme_switcher.form-control
                option(value='barebones') Barebones
                option(value='html') HTML
                option(value='jqueryui') jQuery UI
                option(value='bootstrap2') Bootstrap 2
                option(value='bootstrap3') Bootstrap 3
                option(value='foundation3') Foundation 3
                option(value='foundation4') Foundation 4
                option(value='foundation5') Foundation 5
                option(value='foundation6') Foundation 6
            div
                label Icon Library
                select#icon_switcher.form-control
                option(value='') None
                option(value='jqueryui') jQuery UI
                option(value='bootstrap2') Bootstrap 2 Glyphicons
                option(value='bootstrap3') Bootstrap 3 Glyphicons
                option(value='foundation2') Foundicons 2
                option(value='foundation3') Foundicons 3
                option(value='fontawesome3') FontAwesome 3
                option(value='fontawesome4') FontAwesome 4
            div
                label Object Layout
                select#object_layout.form-control
                option(value='normal') normal
                option(value='grid') grid
            div
                label Show Errors
                select#show_errors.form-control
                option(value='interaction') On Interaction
                option(value='change') On Field Change
                option(value='always') Always
                option(value='never') Never
            div
                label Boolean options
                select#boolean_options.form-control(multiple='' size='9' style='width: 100%;')
                option(value='required_by_default') Object properties required by default
                option(value='display_required_only') Only show required properties by default
                option(value='no_additional_properties') No additional object properties
                option(value='ajax') Allow loading schemas via Ajax
                option(value='disable_edit_json') Disable &quot;Edit JSON&quot; buttons
                option(value='disable_collapse') Disable collapse buttons
                option(value='disable_properties') Disable properties buttons
                option(value='disable_array_add') Disable array add buttons
                option(value='disable_array_reorder') Disable array move buttons
                option(value='disable_array_delete') Disable array delete buttons
                option(value='disable_array_delete_all_rows') Disable array delete all rows buttons
                option(value='disable_array_delete_last_row') Disable array delete last row buttons
            h2 Validation
            p
            | This will update whenever the form changes to show validation errors if there are any.
            textarea#validate.form-control(style='width: 100%; height: 100px; font-family: monospace;' readonly='' disabled='')
        .row(style="display: none")
            .span12.col-md-12.columns.twelve.large-12
            h2 Schema
            p
                | You can change the schema and see how the generated form looks.  After you make changes, click 
                button#setschema.btn.btn-primary Update Schema
            textarea#schema.form-control(style='width: 100%; height: 450px; font-family: monospace;')

    script.
        (function() {
            var schema;
            // Kanet fix
            JSONEditor.defaults.options["disable_collapse"] = true;
            JSONEditor.defaults.options["disable_edit_json"] = true;
            JSONEditor.defaults.options["disable_properties"] = true;

            if(window.location.href.match('[?&]schema=([^&]+)')) {
                try {
                    schema = JSON.parse(LZString.decompressFromBase64(window.location.href.match('[?&]schema=([^&]+)')[1]));
                }
                catch(e) {
                    console.log('invalid starting schema');
                }
            }

            // Default starting schema
            if(!schema) {
                schema = {
                    title: "Template 4",
                    type: "object",
                    properties: {
                        title: {
                            type: "string",
                            description: "Nhập tiêu đề ",
                            minLength: 4,
                            default: "Quá trình phát triển"
                        },
                        image: {
                            type: "string",
                            format: "file",
                            title: "Image"
                        },
                        contents: {
                            type: "array",
                            format: "table",
                            title: "Contents",
                            uniqueItems: true,
                            items: {
                                type: "object",
                                title: "Content",
                                properties: {
                                    Title: {
                                        type: "string"
                                    },
                                    Col1: {
                                        type: "string",
                                        "format": "textarea"
                                    },
                                    Col2: {
                                        "type": "string",
                                        "format": "textarea"
                                    },
                                    Col3: {
                                        "type": "string",
                                        "format": "textarea"
                                    }
                                }
                            },
                            default: [
                                {
                                    Title: "2019",
                                    Col1: "Được trao quyết định áp dụng chính thức Basel II từ Ngân hàng Nhà nước \nĐạt hai giải thưởng Quốc tế về Ngân hàng số Digital Banking từ The Asset \nĐược chấp thuận tăng vốn điều lệ lên hơn 7.800 tỷ đồng \nChuyển trụ sở chính từ Hà Nội vào TP.HCM",
                                    Col2: "Đạt chứng nhận “Doanh nghiệp UPCoM quy mô lớn thực hiện tốt công bố thông tin và minh bạch 2018” do Sở Giao dịch chứng khoán Hà Nội (HNX) công bố \nĐứng thứ hạng 27 trong Top 500 Doanh nghiệp tư nhân có lợi nhuận tốt nhất Việt Nam từ Vietnam Report và báo VietNamNet \nĐạt giải thưởng trong việc hỗ trợ doanh nghiệp SME từ ADB"

                                }
                            ]
                        }
                    }
                }
            }

            // Divs/textareas on the page
            var $schema = document.getElementById('schema');
            var $output = document.getElementById('output');
            var $editor = document.getElementById('editor');
            var $validate = document.getElementById('validate');

            // Buttons
            var $set_schema_button = document.getElementById('setschema');
            var $set_value_button = document.getElementById('setvalue');

            var jsoneditor;

             

            var reload = function(keep_value) {
                var startval = (jsoneditor && keep_value)? jsoneditor.getValue() : window.startval;
                window.startval = undefined;

                if(jsoneditor) jsoneditor.destroy();
                jsoneditor = new JSONEditor($editor,{
                    schema: schema,
                    startval: startval
                });
                window.jsoneditor = jsoneditor;

                // When the value of the editor changes, update the JSON output and validation message
                jsoneditor.on('change',function() {
                    var json = jsoneditor.getValue();

                    $output.value = JSON.stringify(json,null,2);

                    var validation_errors = jsoneditor.validate();
                    // Show validation errors if there are any
                    if(validation_errors.length) {
                        $validate.value = JSON.stringify(validation_errors,null,2);
                    }
                    else {
                        $validate.value = 'valid';
                    }

                    // updateDirectLink();
                });
            };

            // Start the schema and output textareas with initial values
            $schema.value = JSON.stringify(schema,null,2);
            $output.value = '';

            // When the 'update form' button is clicked, set the editor's value
            $set_value_button.addEventListener('click',function() {
                jsoneditor.setValue(JSON.parse($output.value));
            });

            // Update the schema when the button is clicked
            $set_schema_button.addEventListener('click',function() {
                try {
                    schema = JSON.parse($schema.value);
                }
                catch(e) {
                    // alert('Invalid Schema: '+e.message);
                    return;
                }

                reload();
            });

            // Set the theme by loading the right stylesheets
            var setTheme = function(theme,no_reload) {
                theme = theme || '';

                var mapping = {
                    barebones: '',
                    html: '',
                    bootstrap2: '//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css',
                    bootstrap3: '//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css',
                    foundation3: '//cdnjs.cloudflare.com/ajax/libs/foundation/3.2.5/stylesheets/foundation.css',
                    foundation4: '//cdn.jsdelivr.net/foundation/4.3.2/css/foundation.min.css',
                    foundation5: '//cdn.jsdelivr.net/foundation/5.0.2/css/foundation.min.css',
                    foundation6: '//cdn.jsdelivr.net/foundation/6.2.1/foundation.min.css',
                    jqueryui: '//code.jquery.com/ui/1.10.3/themes/south-street/jquery-ui.css'
                };

                if(typeof mapping[theme] === 'undefined') {
                    theme = 'bootstrap3';
                    document.getElementById('theme_switcher').value = theme;
                }

                JSONEditor.defaults.options.theme = theme;

                document.getElementById('theme_stylesheet').href = mapping[theme];
                document.getElementById('theme_switcher').value = JSONEditor.defaults.options.theme;

                if(!no_reload) reload(true);
            };

            // Set the icontheme
            // Set the theme by loading the right stylesheets
            var setIconlib = function(iconlib,no_reload) {
                iconlib = iconlib || '';
                var mapping = {
                    foundation2: '//cdnjs.cloudflare.com/ajax/libs/foundicons/2.0/stylesheets/general_foundicons.css',
                    foundation3: '//cdnjs.cloudflare.com/ajax/libs/foundicons/3.0.0/foundation-icons.css',
                    fontawesome3: '//cdnjs.cloudflare.com/ajax/libs/font-awesome/3.2.1/css/font-awesome.css',
                    fontawesome4: '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css'
                };

                JSONEditor.defaults.options.iconlib = iconlib;

                document.getElementById('icon_stylesheet').href = mapping[iconlib] || '';
                document.getElementById('icon_switcher').value = JSONEditor.defaults.options.iconlib;

                if(!no_reload) reload(true);
            };

            var refreshBooleanOptions = function(no_reload) {
                var boolean_options = document.getElementById('boolean_options').children;
                for(var i=0; i<boolean_options.length; i++) {
                    JSONEditor.defaults.options[boolean_options[i].value] = boolean_options[i].selected;
                }
                if(!no_reload) reload(true);
            };

            // Change listeners for options
            document.getElementById('theme_switcher').addEventListener('change',function() {
                setTheme(this.value);
            });
            document.getElementById('icon_switcher').addEventListener('change',function() {
                setIconlib(this.value);
            });
            document.getElementById('object_layout').addEventListener('change',function() {
            JSONEditor.defaults.options.object_layout = this.value;
                reload(true);
            });
            document.getElementById('show_errors').addEventListener('change',function() {
            JSONEditor.defaults.options.show_errors = this.value;
                reload(true);
            });
            document.getElementById('boolean_options').addEventListener('change',function() {
                refreshBooleanOptions();
            });

            // Get starting value from url
            if(window.location.href.match('[?&]value=([^&]+)')) {
            window.startval = JSON.parse(LZString.decompressFromBase64(window.location.href.match('[?&]value=([^&]+)')[1]));
            }

            // Set options from direct link
            setTheme((window.location.href.match(/[?&]theme=([^&]+)/)||[])[1] || 'bootstrap2', true);

            setIconlib((window.location.href.match(/[?&]iconlib=([^&]*)/)||[null,'fontawesome4'])[1], true);

            document.getElementById('object_layout').value = (window.location.href.match(/[?&]object_layout=([^&]+)/)||[])[1] || 'normal';
            JSONEditor.defaults.options.object_layout = document.getElementById('object_layout').value;

            document.getElementById('show_errors').value = (window.location.href.match(/[?&]show_errors=([^&]+)/)||[])[1] || 'interaction';
            JSONEditor.defaults.options.show_errors = document.getElementById('show_errors').value;

            var boolean_options = document.getElementById('boolean_options').children;
            for(var i=0; i<boolean_options.length; i++) {
                if(window.location.href.match(new RegExp('[?&]'+boolean_options[i].getAttribute('value')+'([&=]|$)'))) {
                    boolean_options[i].selected = true;
                }
            }
            refreshBooleanOptions(true);

            reload();
        })();